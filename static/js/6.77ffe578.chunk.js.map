{"version":3,"sources":["containers/AdminView/OrdersToConfirm/OrderToConfirm/OrderToConfirm.module.css","containers/AdminView/OrdersToConfirm/OrderToConfirm/OrderToConfirm.js","containers/AdminView/OrdersToConfirm/OrdersToConfirm.js"],"names":["module","exports","connect","state","orderConfirmed","order","ordersForAdmin","loading","token","auth","userId","dispatch","onAdminOrder","orderData","actions","withErrorHandler","props","ingredients","sauces","breadTypes","localStorage","setItem","decision","getItem","ingredientName","push","name","amount","saucesName","breadTypesName","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","fontSize","color","key","sauceOutput","su","breadTypeOutput","bd","className","classes","OrderToConfirm","btnConfirm","onClick","id","orderKey","axios","onFetchOrders","useEffect","orders","Spinner","confirmedOrder"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,eAAiB,uCAAuC,WAAa,qC,6HCgJxEC,eAhBS,SAAAC,GACtB,MAAO,CACLC,eAAgBD,EAAME,MAAMC,eAC5BC,QAASJ,EAAME,MAAME,QACrBC,MAAOL,EAAMM,KAAKD,MAClBE,OAAQP,EAAMM,KAAKC,WAII,SAAAC,GACzB,MAAO,CACLC,aAAc,SAACC,EAAWL,GAAZ,OACZG,EAASG,IAAqBD,EAAWL,QAIhCN,CAGba,aA7IqB,SAAAC,GACrB,IAAMC,EAAc,GACdC,EAAS,GACTC,EAAa,GAEnBC,aAAaC,QAAQ,MAAOL,EAAMM,UAClC,IAAMA,EAAWF,aAAaG,QAAQ,OAEtC,IAAK,IAAIC,KAAkBR,EAAMC,YAC/BA,EAAYQ,KAAK,CACfC,KAAMF,EACNG,OAAQX,EAAMC,YAAYO,KAI9B,IAAK,IAAII,KAAcZ,EAAME,OAC3BA,EAAOO,KAAK,CACVC,KAAME,EACND,OAAQX,EAAME,OAAOU,KAIzB,IAAK,IAAIC,KAAkBb,EAAMG,WAC/BA,EAAWM,KAAK,CACdC,KAAMG,EACNF,OAAQX,EAAMG,WAAWU,KAG7B,IAAMC,EAAmBb,EAAYc,KAAI,SAAAC,GACvC,OACE,0BACEC,MAAO,CACLC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,MACTC,SAAU,SACVC,MAAO,oBAETC,IAAKT,EAAGN,MAEPM,EAAGN,KAZN,KAYcM,EAAGL,OAZjB,QAgBEe,EAAcxB,EAAOa,KAAI,SAAAY,GAC7B,OACE,0BACEV,MAAO,CACLC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,MACTC,SAAU,SACVC,MAAO,oBAETC,IAAKE,EAAGjB,MAEPiB,EAAGjB,KAZN,KAYciB,EAAGhB,OAZjB,QAiBEiB,EAAkBzB,EAAWY,KAAI,SAAAc,GACrC,OACE,0BACEZ,MAAO,CACLC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,MACTC,SAAU,SACVC,MAAO,oBAETC,IAAKI,EAAGnB,MAEPmB,EAAGnB,KAZN,KAYcmB,EAAGlB,OAZjB,QAiBJ,OACE,yBAAKmB,UAAWC,IAAQC,gBACtB,yCAAelB,GACf,oCAAUY,GACV,yCAAeE,GACf,sCACW,IACT,uBACEX,MAAO,CACLC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,MACTC,SAAU,OACVC,MAAO,qBAGRlB,IAGL,4BACEwB,UAAWC,IAAQE,WACnBC,QAAS,WACP,IAAM7C,EAAQ,CACZY,YAAaD,EAAMC,YACnBP,OAAQM,EAAMN,OACdyC,GAAInC,EAAMoC,UAEZpC,EAAMJ,aAAaP,EAAOW,EAAMR,SARpC,qBAoC6B6C,MCxGpBnD,uBAdS,SAAAC,GACtB,MAAO,CACLG,eAAgBH,EAAME,MAAMC,eAC5BC,QAASJ,EAAME,MAAME,QACrBC,MAAOL,EAAMM,KAAKD,MAClBE,OAAQP,EAAMM,KAAKC,WAII,SAAAC,GACzB,MAAO,CACL2C,cAAe,SAAA9C,GAAK,OAAIG,EAASG,IAA4BN,QAGlDN,CAGba,aAvCsB,SAAAC,GAAU,IACxBsC,EAAkBtC,EAAlBsC,cAERC,qBAAU,WACRvC,EAAMsC,cAActC,EAAMR,SACzB,CAAC8C,IAEJ,IAAIE,EAAS,kBAACC,EAAA,EAAD,MAab,OAZKzC,EAAMT,SAAWS,EAAMV,iBAC1BkD,EAASxC,EAAMV,eAAeyB,KAAI,SAAA1B,GAAK,OACrC,kBAAC,EAAD,CACE+C,SAAU/C,EAAM8C,GAChBlC,YAAaZ,EAAMY,YACnBC,OAAQb,EAAMa,OACdC,WAAYd,EAAMc,WAClBG,SAAUjB,EAAMqD,eAChBhD,OAAQL,EAAMK,aAIb,6BAAM8C,KAmBqBH","file":"static/js/6.77ffe578.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"OrderToConfirm\":\"OrderToConfirm_OrderToConfirm__2w-VZ\",\"btnConfirm\":\"OrderToConfirm_btnConfirm__1Lcye\"};","import React from \"react\";\r\nimport classes from \"./OrderToConfirm.module.css\";\r\nimport axios from \"axios\";\r\nimport withErrorHandler from \"../../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst OrderToConfirm = props => {\r\n  const ingredients = [];\r\n  const sauces = [];\r\n  const breadTypes = [];\r\n\r\n  localStorage.setItem(\"dec\", props.decision);\r\n  const decision = localStorage.getItem(\"dec\");\r\n\r\n  for (let ingredientName in props.ingredients) {\r\n    ingredients.push({\r\n      name: ingredientName,\r\n      amount: props.ingredients[ingredientName]\r\n    });\r\n  }\r\n\r\n  for (let saucesName in props.sauces) {\r\n    sauces.push({\r\n      name: saucesName,\r\n      amount: props.sauces[saucesName]\r\n    });\r\n  }\r\n\r\n  for (let breadTypesName in props.breadTypes) {\r\n    breadTypes.push({\r\n      name: breadTypesName,\r\n      amount: props.breadTypes[breadTypesName]\r\n    });\r\n  }\r\n  const ingredientOutput = ingredients.map(ig => {\r\n    return (\r\n      <span\r\n        style={{\r\n          textTransform: \"capitalize\",\r\n          display: \"inline-block\",\r\n          margin: \"0 6px\",\r\n          border: \"1px solid #ccc\",\r\n          padding: \"4px\",\r\n          fontSize: \"1.3rem\",\r\n          color: \"rgb(241, 139, 4)\"\r\n        }}\r\n        key={ig.name}\r\n      >\r\n        {ig.name} ({ig.amount})\r\n      </span>\r\n    );\r\n  });\r\n  const sauceOutput = sauces.map(su => {\r\n    return (\r\n      <span\r\n        style={{\r\n          textTransform: \"capitalize\",\r\n          display: \"inline-block\",\r\n          margin: \"0 6px\",\r\n          border: \"1px solid #ccc\",\r\n          padding: \"4px\",\r\n          fontSize: \"1.3rem\",\r\n          color: \"rgb(241, 139, 4)\"\r\n        }}\r\n        key={su.name}\r\n      >\r\n        {su.name} ({su.amount})\r\n      </span>\r\n    );\r\n  });\r\n\r\n  const breadTypeOutput = breadTypes.map(bd => {\r\n    return (\r\n      <span\r\n        style={{\r\n          textTransform: \"capitalize\",\r\n          display: \"inline-block\",\r\n          margin: \"0 6px\",\r\n          border: \"1px solid #ccc\",\r\n          padding: \"4px\",\r\n          fontSize: \"1.3rem\",\r\n          color: \"rgb(241, 139, 4)\"\r\n        }}\r\n        key={bd.name}\r\n      >\r\n        {bd.name} ({bd.amount})\r\n      </span>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={classes.OrderToConfirm}>\r\n      <p>Skladniki: {ingredientOutput}</p>\r\n      <p>Sosy: {sauceOutput}</p>\r\n      <p>Pieczywko: {breadTypeOutput}</p>\r\n      <p>\r\n        Decyzja:{\" \"}\r\n        <p\r\n          style={{\r\n            textTransform: \"capitalize\",\r\n            display: \"inline-block\",\r\n            margin: \"0 8px\",\r\n            border: \"1px solid #ccc\",\r\n            padding: \"5px\",\r\n            fontSize: \"2rem\",\r\n            color: \"rgb(241, 139, 4)\"\r\n          }}\r\n        >\r\n          {decision}\r\n        </p>\r\n      </p>\r\n      <button\r\n        className={classes.btnConfirm}\r\n        onClick={() => {\r\n          const order = {\r\n            ingredients: props.ingredients,\r\n            userId: props.userId,\r\n            id: props.orderKey\r\n          };\r\n          props.onAdminOrder(order, props.token);\r\n        }}\r\n      >\r\n        Potwierd≈∫\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    orderConfirmed: state.order.ordersForAdmin,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAdminOrder: (orderData, token) =>\r\n      dispatch(actions.confirmOrder(orderData, token))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(OrderToConfirm, axios));\r\n","import React, { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport OrderToConfirm from \"./OrderToConfirm/OrderToConfirm\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst OrdersToConfirm = props => {\r\n  const { onFetchOrders } = props;\r\n\r\n  useEffect(() => {\r\n    props.onFetchOrders(props.token);\r\n  }, [onFetchOrders]);\r\n\r\n  let orders = <Spinner />;\r\n  if (!props.loading && props.ordersForAdmin) {\r\n    orders = props.ordersForAdmin.map(order => (\r\n      <OrderToConfirm\r\n        orderKey={order.id}\r\n        ingredients={order.ingredients}\r\n        sauces={order.sauces}\r\n        breadTypes={order.breadTypes}\r\n        decision={order.confirmedOrder}\r\n        userId={order.userId}\r\n      />\r\n    ));\r\n  }\r\n  return <div>{orders}</div>;\r\n};\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ordersForAdmin: state.order.ordersForAdmin,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchOrders: token => dispatch(actions.fetchOrdersForAdmin(token))\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(OrdersToConfirm, axios));\r\n"],"sourceRoot":""}