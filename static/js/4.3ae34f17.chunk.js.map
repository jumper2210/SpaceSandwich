{"version":3,"sources":["containers/Authentication/Authentication.module.css","containers/Authentication/Authentication.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingSandwich","sandwichBuilder","building","authRedirectPath","dispatch","onAuth","username","password","isSignup","actions","onSetAuthRedirectPath","props","useState","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","authForm","setAuthForm","setIsSignup","useEffect","formElementsArray","key","push","id","setup","name","form","map","formElement","invalid","shouldValidate","changed","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","focused","updatedFormElement","inputFocusedHandler","errorMessage","uglyErrorMessage","replace","style","fontSize","color","authRedirect","to","canSubmit","className","classes","Auth","titleAuth","onSubmit","preventDefault","btnAuth","disabled","textAuth","onClick","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.3ae34f17.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Authentication_Auth__31gnq\",\"btnAuth\":\"Authentication_btnAuth__3jIxH\",\"textAuth\":\"Authentication_textAuth__QxMQa\",\"titleAuth\":\"Authentication_titleAuth__eGSAb\"};","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport classes from \"./Authentication.module.css\";\r\nimport * as actions from \"../../store/actions/index.js\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\n\r\nimport { updateObject, checkValidity } from \"../../store/utility\";\r\nconst Authentication = props => {\r\n  const [authForm, setAuthForm] = useState({\r\n    username: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Twoja nazwa\"\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 3\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    password: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"password\",\r\n        placeholder: \"Twoje haslo\"\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 3\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    }\r\n  });\r\n  const [isSignup, setIsSignup] = useState(false);\r\n\r\n  const { buildingSandwich, authRedirectPath, onSetAuthRedirectPath } = props;\r\n\r\n  useEffect(() => {\r\n    if (!buildingSandwich && authRedirectPath !== \"/\") {\r\n      onSetAuthRedirectPath();\r\n    }\r\n  }, [buildingSandwich, authRedirectPath, onSetAuthRedirectPath]);\r\n\r\n  const inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(authForm, {\r\n      [controlName]: updateObject(authForm[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          authForm[controlName].validation\r\n        )\r\n      })\r\n    });\r\n    setAuthForm(updatedControls);\r\n  };\r\n\r\n  const inputFocusedHandler = (event, controlName) => {\r\n    const updatedControls = {\r\n      ...authForm\r\n    };\r\n    const updatedFormElement = {\r\n      ...updatedControls[controlName]\r\n    };\r\n    updatedFormElement.touched = true;\r\n    updatedControls[controlName] = updatedFormElement;\r\n    setAuthForm(updatedControls);\r\n  };\r\n\r\n  const submitHandler = (event, token) => {\r\n    event.preventDefault();\r\n    props.onAuth(authForm.username.value, authForm.password.value, isSignup);\r\n  };\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsSignup(!isSignup);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in authForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      setup: authForm[key],\r\n      name: key\r\n    });\r\n  }\r\n\r\n  let form = formElementsArray.map(formElement => (\r\n    <Input\r\n      key={formElement.id}\r\n      name={formElement.name}\r\n      elementType={formElement.setup.elementType}\r\n      elementConfig={formElement.setup.elementConfig}\r\n      value={formElement.setup.value}\r\n      invalid={!formElement.setup.valid}\r\n      shouldValidate={formElement.setup.validation}\r\n      touched={formElement.setup.touched}\r\n      changed={event => inputChangedHandler(event, formElement.id)}\r\n      focused={event => inputFocusedHandler(event, formElement.id)}\r\n    />\r\n  ));\r\n\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  let errorMessage = null;\r\n\r\n  if (props.error) {\r\n    let uglyErrorMessage = props.error.replace(/_/g, \" \");\r\n    if (uglyErrorMessage === \"Unauthorized\") {\r\n      uglyErrorMessage = (\r\n        <p style={{ fontSize: \"1.3rem\" }}>\"PODAŁEŚ ZŁE HASŁO, ALBO NAZWE\"</p>\r\n      );\r\n    } else {\r\n      uglyErrorMessage = (\r\n        <p style={{ fontSize: \"1.3rem\" }}> \"COS POSZLO NIE TAK.\"</p>\r\n      );\r\n    }\r\n    errorMessage = <p style={{ color: \"red\" }}>{uglyErrorMessage}</p>;\r\n  }\r\n\r\n  let authRedirect = null;\r\n  if (props.isAuthenticated) {\r\n    authRedirect = <Redirect to={props.authRedirectPath} />;\r\n  }\r\n\r\n  let canSubmit = false;\r\n  if (authForm.username.valid && authForm.password.valid) canSubmit = true;\r\n\r\n  return (\r\n    <div className={classes.Auth}>\r\n      {authRedirect}\r\n      <h2 className={classes.titleAuth}>\r\n        {isSignup ? \"Rejestracja\" : \"logowanie\"}\r\n      </h2>\r\n      {errorMessage}\r\n      <form onSubmit={submitHandler}>\r\n        {form}\r\n        <button className={classes.btnAuth} disabled={!canSubmit}>\r\n          Potwierdź\r\n        </button>\r\n      </form>\r\n      <button className={classes.textAuth} onClick={switchAuthModeHandler}>\r\n        {!isSignup\r\n          ? \"Nie masz jeszcze konto? Załóż je !\"\r\n          : \"Masz już konto ? Zaloguj sie\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingSandwich: state.sandwichBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (username, password, isSignup) =>\r\n      dispatch(actions.auth(username, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Authentication);\r\n","import React from \"react\";\r\n\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = props => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map(option => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__WfKYm\",\"Label\":\"Input_Label__KRHTq\",\"InputElement\":\"Input_InputElement__tDuO3\",\"Invalid\":\"Input_Invalid__3Af-p\"};"],"sourceRoot":""}